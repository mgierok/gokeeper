// Code generated by go-bindata. DO NOT EDIT.
//  metadata: true
//  mode: 0444
// sources:
//  assets/views/index.tmpl

package views

import (
	"os"
	"path/filepath"
	"reflect"
	"time"
	"unsafe"
)

func bindataRead(data string) []byte {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b
}

type asset struct {
	name string
	data string
	time time.Time
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return int64(len(a.data))
}

func (a *asset) Mode() os.FileMode {
	return 0444
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"index.tmpl": &asset{
		name: "index.tmpl",
		data: "" +
			"\x3c\x68\x74\x6d\x6c\x3e\x0a\x09\x3c\x62\x6f\x64\x79\x3e\x0a\x09\x09\x3c\x70\x3e\x7b\x7b\x20\x2e" +
			"\x61\x70\x70\x4e\x61\x6d\x65\x20\x7d\x7d\x3c\x2f\x70\x3e\x0a\x09\x3c\x2f\x62\x6f\x64\x79\x3e\x0a" +
			"\x3c\x2f\x68\x74\x6d\x6c\x3e\x0a",
		time: time.Unix(1503844929, 829554014),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return bindataRead(a.data), a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}
